Plaaforma usada pgAdmin 4


-- HACK 1:

create table countries(
  id_country serial primary key,
  name varchar(50) not null  
);

create table users(
 id_users serial primary key,
 id_country integer not null,
 email varchar(100) not null,
 name varchar (50) not null,
 foreign key (id_country) references countries (id_country)   
);



-- HACK 2:

-- CREATE
insert into countries (name) values ('argentina') , ('colombia'),('chile');
select * from countries;
-- INSERT
insert into users (id_country, email, name) 
  values (2, 'foo@foo.com', 'fooziman'), (3, 'bar@bar.com', 'barziman'); 
select * from users;
-- DELETE
delete from users where email = 'bar@bar.com';
-- UPDATE
update users set email = 'foo@foo.foo', name = 'fooz' where id_users = 1;
select * from users;
-- SELECT
select * from users inner join  countries on users.id_country = countries.id_country;

select u.id_users as id, u.email, u.name as fullname, c.name 
  from users u inner join  countries c on u.id_country = c.id_country;
  

  
-- HACK 3:

design contact database

- table countries:
	-id_country (PK)
	-name
- table priorities:
	-id_priority (PK)
	-type_name 
- table contact_request
	-id_email (PK)
	-id_country (FK)
	-id_priority (FK)
	-name
	-detail
	-physical_address



-- Crear tabla priorities
CREATE TABLE priorities (
    id_priority SERIAL PRIMARY KEY,
    type_name VARCHAR(50) NOT NULL
);
-- Crear tabla contact_request
CREATE TABLE contact_request (
    id_email VARCHAR(100) PRIMARY KEY,
    id_country INTEGER NOT NULL,
    id_priority INTEGER NOT NULL,
    name VARCHAR(50) NOT NULL,
    detail TEXT,
    physical_address VARCHAR(255),
    FOREIGN KEY (id_country) REFERENCES countries (id_country),
    FOREIGN KEY (id_priority) REFERENCES priorities (id_priority)
);



-- HACK 4:

-- Insertar registros en la tabla countries
INSERT INTO countries (name) VALUES
    ('España'),
    ('Venezuela'),
    ('Corea'),
    ('Argentina'),
    ('México');
-- Insertar registros en la tabla priorities
INSERT INTO priorities (type_name) VALUES
    ('Alta'),
    ('Media'),
    ('Baja');
-- Insertar registros en la tabla contact_request
INSERT INTO contact_request (id_email, id_country, id_priority, name, detail, physical_address) VALUES
    ('pedro@example.com', 1, 1, 'Pedro', 'Solicitud urgente sobre producto', 'Calle Falsa 123, Madrid'),
    ('valeria@example.com', 2, 2, 'Valeria', 'Consulta sobre disponibilidad', 'Avenida Siempre Viva 742, Caracas'),
    ('flor@example.com', 3, 3, 'Flor', 'Queja sobre el servicio', 'Boulevard de los Sueños 45, Buenos Aires');
-- Eliminar el último usuario insertado
DELETE FROM contact_request
WHERE id_email = (SELECT id_email FROM contact_request ORDER BY id_email DESC LIMIT 1);
-- Actualizar el primer usuario
UPDATE contact_request
SET name = 'Pedro Actualizado', detail = 'Solicitud urgente actualizada', physical_address = 'Calle Nueva 456, Madrid'
WHERE id_email = 'pedro@example.com';



-- HACK 5:

design ecommerce database

- table countries:
	-id_country (PK)
	-name

- table roles:
	-id_role (PK)
	-name

- table taxes:
	-id_tax (PK)
	-percentage

- table offers:
	-id_offer (PK)
	-status

- table discounts:
	-id_discount (PK)
	-status
	-percentage

- table payments:
	-id_payment (PK)
	-id_customer (FK -> customers)
	-type

- table customers:
	-email (PK)
	-id_country (FK -> countries)
	-id_role (FK -> roles)
	-name
	-age
	-password
	-physical_address

- table invoice_status:
	-id_invoice_status (PK)
	-status

- table products:
	-id_product (PK)
	-discount
	-id_tax (FK -> taxes)
	-id_offer (FK -> offers)
	-name
	-details
	-minimum_stock
	-maximum_stock
	-current_stock
	-price
	-price_with_tax

- table product_customers:
	-id_product (PK, FK -> products)
	-id_customer (PK, FK -> customers)

- table invoices:
	-id_invoice (PK)
	-id_customer (FK -> customers)
	-id_payment_status (FK -> invoice_status)
	-date
	-total_to_pay

- table orders:
	-id_order (PK)
	-id_invoice (FK -> invoices)
	-id_product (FK -> products)
	-detail
	-amount
	-price




-- Crear tabla roles
CREATE TABLE roles (
    id_role SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);
-- Crear tabla customers
CREATE TABLE customers (
    email VARCHAR(100) PRIMARY KEY,
    id_country INTEGER NOT NULL,
    id_role INTEGER NOT NULL,
    name VARCHAR(50) NOT NULL,
    age INTEGER,
    password VARCHAR(100) NOT NULL,
    physical_address VARCHAR(255),
    FOREIGN KEY (id_country) REFERENCES countries (id_country),
    FOREIGN KEY (id_role) REFERENCES roles (id_role)
);
-- Crear tabla taxes
CREATE TABLE taxes (
    id_tax SERIAL PRIMARY KEY,
    percentage DECIMAL(5, 2) NOT NULL
);
-- Crear tabla offers
CREATE TABLE offers (
    id_offer SERIAL PRIMARY KEY,
    status VARCHAR(50) NOT NULL
);
-- Crear tabla discounts
CREATE TABLE discounts (
    id_discount SERIAL PRIMARY KEY,
    status VARCHAR(50) NOT NULL,
    percentage DECIMAL(5, 2) NOT NULL
);
-- Crear tabla payments
CREATE TABLE payments (
    id_payment SERIAL PRIMARY KEY,
    id_customer VARCHAR(100) NOT NULL,
    type VARCHAR(50) NOT NULL,
    FOREIGN KEY (id_customer) REFERENCES customers (email) ON DELETE CASCADE
);
-- Crear tabla invoice_status
CREATE TABLE invoice_status (
    id_invoice_status SERIAL PRIMARY KEY,
    status VARCHAR(50) NOT NULL
);
-- Crear tabla products
CREATE TABLE products (
    id_product SERIAL PRIMARY KEY,
    discount INTEGER,
    id_tax INTEGER NOT NULL,
    id_offer INTEGER NOT NULL,
    name VARCHAR(100) NOT NULL,
    details TEXT,
    minimum_stock INTEGER NOT NULL,
    maximum_stock INTEGER NOT NULL,
    current_stock INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    price_with_tax DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_tax) REFERENCES taxes (id_tax),
    FOREIGN KEY (id_offer) REFERENCES offers (id_offer)
);
-- Crear tabla product_customers
CREATE TABLE product_customers (
    id_product INTEGER,
    email VARCHAR(100),
    FOREIGN KEY (id_product) REFERENCES products (id_product) ON DELETE CASCADE,
    FOREIGN KEY (email) REFERENCES customers (email) ON DELETE CASCADE,
    PRIMARY KEY (id_product, email)
);
-- Crear tabla invoices
CREATE TABLE invoices (
    id_invoice SERIAL PRIMARY KEY,
    id_customer VARCHAR(100) NOT NULL,
    id_payment_status INTEGER NOT NULL,
    date DATE NOT NULL,
    total_to_pay DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_customer) REFERENCES customers (email) ON DELETE CASCADE,
    FOREIGN KEY (id_payment_status) REFERENCES invoice_status (id_invoice_status)
);
-- Crear tabla orders
CREATE TABLE orders (
    id_order SERIAL PRIMARY KEY,
    id_invoice INTEGER NOT NULL,
    id_product INTEGER NOT NULL,
    detail TEXT,
    amount INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_invoice) REFERENCES invoices (id_invoice) ON DELETE CASCADE,
    FOREIGN KEY (id_product) REFERENCES products (id_product)
);




-- HACK 6:

-- Insertar registros en la tabla countries
INSERT INTO countries (name) VALUES
    ('Japon'),
    ('Australia'),
    ('Canada');
-- Insertar registros en la tabla roles
INSERT INTO roles (name) VALUES
    ('Admin'),
    ('User'),
    ('Manager');
SELECT * FROM roles;
-- Insertar registros en la tabla taxes
INSERT INTO taxes (percentage) VALUES
    (21.00),
    (10.00),
    (5.00);
SELECT * FROM taxes;
-- Insertar registros en la tabla offers
INSERT INTO offers (status) VALUES
    ('Active'),
    ('Inactive');
SELECT * FROM offers;
-- Insertar registros en la tabla discounts
INSERT INTO discounts (status, percentage) VALUES
    ('Active', 15.00),
    ('Inactive', 10.00),
    ('Active', 5.00);
-- Insertar registros en la tabla customers
INSERT INTO customers (email, id_country, id_role, name, age, password, physical_address) VALUES
    ('Tyrion@example.com', 1, 1, 'Tyrion', 30, 'password123', 'AV Westeros, Madrid'),
    ('coco@example.com', 2, 2, 'Coco', 25, 'coco4321', 'La playa, Cumana'),
    ('Obi@example.com', 3, 3, 'Obi', 17, 'starwars1', 'Galaxia muy muy lejana, Miami');
SELECT * FROM customers;
-- Insertar registros en la tabla payments
INSERT INTO payments (id_customer, type) VALUES
    ('Tyrion@example.com', 'Credit Card'),
    ('coco@example.com', 'PayPal'),
    ('Obi@example.com', 'Bank Transfer');
SELECT * FROM payments;
-- Insertar registros en la tabla invoice_status
INSERT INTO invoice_status (status) VALUES
    ('Pending'),
    ('Paid'),
    ('Cancelled');
SELECT * FROM invoice_status;
-- Insertar registros en la tabla products
INSERT INTO products (discount, id_tax, id_offer, name, details, minimum_stock, maximum_stock, current_stock, price, price_with_tax) VALUES
    (1, 1, 1, 'Producto 1', 'Detalles del producto 1', 10, 100, 50, 100.00, 121.00),
    (2, 2, 2, 'Producto 2', 'Detalles del producto 2', 5, 50, 30, 200.00, 220.00),
    (3, 3, 1, 'Producto 3', 'Detalles del producto 3', 20, 200, 100, 300.00, 315.00);
SELECT * FROM products;
-- Insertar registros en la tabla product_customers
INSERT INTO product_customers (id_product, id_customer) VALUES
    (4, 'Tyrion@example.com'),
    (5, 'coco@example.com'),
    (6, 'Obi@example.com');
SELECT * FROM product_customers;
-- Insertar registros en la tabla invoices
INSERT INTO invoices (id_customer, id_payment_status, date, total_to_pay) VALUES
    ('Tyrion@example.com', 1, '2024-08-01', 100.00),
    ('coco@example.com', 2, '2024-08-02', 200.00),
    ('Obi@example.com', 3, '2024-08-03', 300.00);
SELECT * FROM invoices;
-- Insertar registros en la tabla orders
INSERT INTO orders (id_invoice, id_product, detail, amount, price) VALUES
    (1, 4, 'Orden de producto 1', 2, 100.00),
    (2, 5, 'Orden de producto 2', 1, 200.00),
    (3, 6, 'Orden de producto 3', 3, 300.00);
SELECT * FROM orders;


-- Eliminar el último usuario insertado
DELETE FROM customers
WHERE email = (SELECT email FROM customers ORDER BY email DESC LIMIT 1);
SELECT * FROM customers;

-- Actualizar el último usuario (basado en el correo electrónico)
UPDATE customers
SET name = 'Obi Actualizado', password = 'nuevo_password123', physical_address = 'Galaxia muy muy lejana 2.0, Miami'
WHERE email = (SELECT email FROM customers ORDER BY email DESC LIMIT 1);
SELECT * FROM customers;

-- Actualizar todos los impuestos
UPDATE taxes
SET percentage = percentage + 1.00;

-- Actualizar todos los precios de los productos (aumentar en un 10%)
UPDATE products
SET price = price * 1.10,
    price_with_tax = price_with_tax * 1.10;










